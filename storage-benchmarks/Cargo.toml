[package]
edition = "2021"
name    = "storage-benchmarks"
version = "0.1.0"

[dependencies]
# Storage APIs - using public nomos repository
cryptarchia-engine = { git = "https://github.com/logos-co/nomos-node", package = "cryptarchia-engine" }
nomos-core         = { git = "https://github.com/logos-co/nomos-node", package = "nomos-core" }
nomos-storage      = { git = "https://github.com/logos-co/nomos-node", package = "nomos-storage", features = ["rocksdb-backend"] }

# Database
rocksdb = { version = "0.24", features = ["bindgen-runtime"] }

# Async runtime
tokio = { features = ["macros", "rt-multi-thread", "time"], version = "1" }
async-trait = "0.1"

# Data structures  
bincode    = "1.0"
bytes      = "1.3"
chrono     = { version = "0.4", features = ["serde"] }
env_logger = "0.10"
log        = "0.4"
num_cpus   = "1.0"
serde      = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
tempfile   = "3"
toml       = "0.8"
rand       = "0.8"
rand_chacha = "0.3"
ed25519-dalek = "2.0"
groth16    = { git = "https://github.com/logos-co/nomos-node", package = "groth16" }
pol        = { git = "https://github.com/logos-co/nomos-node", package = "pol" }
futures    = "0.3"
rayon      = "1.0"
rand_distr = "0.4"
hdrhistogram = "7.5"
md5 = "0.7"
clap = { version = "4.0", features = ["derive"] }
thiserror = "1.0"
smallvec = "1.0"

# Optional allocator features
mimalloc = { version = "0.1", optional = true }
jemallocator = { version = "0.5", optional = true }

[features]
default = []
allocator-mimalloc = ["mimalloc"]
allocator-jemalloc = ["jemallocator"]

[dev-dependencies]
divan = { default-features = false, version = "0.1" }

# Production binaries
[[bin]]
name = "dataset_generator"
path = "src/bin/dataset_generator.rs"

[[bin]]
name = "verify_dataset_integrity"
path = "src/bin/verify_dataset_integrity.rs"

[[bin]]
name = "storage_bench_runner"
path = "src/bin/storage_bench_runner.rs"

[[bin]]
name = "verify_rocksdb_properties"
path = "src/bin/verify_rocksdb_properties.rs"

[[bin]]
name = "dataset_builder"
path = "src/bin/dataset_builder.rs"

# Educational examples
[[example]]
name = "storage_capacity_calculator"
path = "examples/storage_capacity_calculator.rs"

[lints.clippy]

# Nursery and allowed nursery warnings (new lints will warn by default)
nursery = { level = "warn", priority = -1 }

# Pedantic and allowed pedantic warnings (new lints will warn by default)
pedantic = { level = "warn", priority = -1 }

similar_names = { level = "allow" }

# Restriction and allowed restriction warnings (new lints will warn by default)
restriction = { level = "warn", priority = -1 }

absolute_paths                    = { level = "allow" }
alloc_instead_of_core             = { level = "allow" }
arbitrary_source_item_ordering    = { level = "allow" }
big_endian_bytes                  = { level = "allow" }
blanket_clippy_restriction_lints  = { level = "allow" }
decimal_literal_representation    = { level = "allow" }
default_numeric_fallback          = { level = "allow" }
deref_by_slicing                  = { level = "allow" }
else_if_without_else              = { level = "allow" }
exhaustive_enums                  = { level = "allow" }
exhaustive_structs                = { level = "allow" }
exit                              = { level = "allow" }
expect_used                       = { level = "allow" }
field_scoped_visibility_modifiers = { level = "allow" }
float_arithmetic                  = { level = "allow" }
get_unwrap                        = { level = "allow" }
host_endian_bytes                 = { level = "allow" }
implicit_return                   = { level = "allow" }
integer_division_remainder_used   = { level = "allow" }
iter_over_hash_type               = { level = "allow" }
let_underscore_must_use           = { level = "allow" }
let_underscore_untyped            = { level = "allow" }
little_endian_bytes               = { level = "allow" }
map_err_ignore                    = { level = "allow" }
min_ident_chars                   = { level = "allow" }
missing_asserts_for_indexing      = { level = "allow" }
missing_docs_in_private_items     = { level = "allow" }
missing_inline_in_public_items    = { level = "allow" }
missing_trait_methods             = { level = "allow" }
mixed_read_write_in_expression    = { level = "allow" }
mod_module_files                  = { level = "allow" }
module_name_repetitions           = { level = "allow" }
modulo_arithmetic                 = { level = "allow" }
panic                             = { level = "allow" }
panic_in_result_fn                = { level = "allow" }
partial_pub_fields                = { level = "allow" }
print_stderr                      = { level = "allow" }
print_stdout                      = { level = "allow" }
pub_use                           = { level = "allow" }
pub_with_shorthand                = { level = "allow" }
question_mark_used                = { level = "allow" }
self_named_module_files           = { level = "allow" }
semicolon_inside_block            = { level = "allow" }
single_call_fn                    = { level = "allow" }
single_char_lifetime_names        = { level = "allow" }
std_instead_of_alloc              = { level = "allow" }
std_instead_of_core               = { level = "allow" }
struct_field_names                = { level = "allow" }
unseparated_literal_suffix        = { level = "allow" }
use_debug                         = { level = "allow" }
wildcard_enum_match_arm           = { level = "allow" }

arithmetic_side_effects     = { level = "allow" }
as_conversions              = { level = "allow" }
as_pointer_underscore       = { level = "allow" }
as_underscore               = { level = "allow" }
assertions_on_result_states = { level = "allow" }
cast_possible_truncation    = { level = "allow" }
cast_possible_wrap          = { level = "allow" }
cast_precision_loss         = { level = "allow" }
cast_sign_loss              = { level = "allow" }
doc_broken_link             = { level = "allow" }
string_slice                = { level = "allow" }
future_not_send             = { level = "allow" }
unused_self                 = { level = "allow" }
unnecessary_wraps           = { level = "allow" }
single_match_else           = { level = "allow" }
option_if_let_else          = { level = "allow" }
uninlined_format_args       = { level = "allow" }
needless_borrow             = { level = "allow" }
str_to_string               = { level = "allow" }
new_without_default         = { level = "allow" }
must_use_candidate          = { level = "allow" }
missing_const_for_fn        = { level = "allow" }
large_stack_arrays          = { level = "allow" }
unnecessary_to_owned        = { level = "allow" }
undocumented_unsafe_blocks  = { level = "allow" }
ref_as_ptr                  = { level = "allow" }
unused_async                = { level = "allow" }
items_after_statements      = { level = "allow" }
ok_expect                   = { level = "allow" }
map_with_unused_argument_over_ranges = { level = "allow" }
ignored_unit_patterns       = { level = "allow" }
too_many_lines              = { level = "allow" }
not_unsafe_ptr_arg_deref    = { level = "allow" }
type_complexity             = { level = "allow" }
single_match                = { level = "allow" }
error_impl_error            = { level = "allow" }
impl_trait_in_params        = { level = "allow" }
indexing_slicing            = { level = "allow" }
infinite_loop               = { level = "allow" }
integer_division            = { level = "allow" }
large_stack_frames          = { level = "allow" }
missing_assert_message      = { level = "allow" }
missing_errors_doc          = { level = "allow" }
missing_panics_doc          = { level = "allow" }
pattern_type_mismatch       = { level = "allow" }
redundant_test_prefix       = { level = "allow" }
ref_patterns                = { level = "allow" }
renamed_function_params     = { level = "allow" }
same_name_method            = { level = "allow" }
shadow_reuse                = { level = "allow" }
shadow_same                 = { level = "allow" }
shadow_unrelated            = { level = "allow" }
tests_outside_test_module   = { level = "allow" }
todo                        = { level = "allow" }
unimplemented               = { level = "allow" }
unreachable                 = { level = "allow" }
unwrap_in_result            = { level = "allow" }
unwrap_used                 = { level = "allow" }

[lints.rust]

unused_crate_dependencies = { level = "allow" }
unused_results            = { level = "allow" }

impl_trait_redundant_captures = { level = "warn" }
missing_unsafe_on_extern      = { level = "warn" }
redundant_imports             = { level = "warn" }
redundant_lifetimes           = { level = "warn" }
single_use_lifetimes          = { level = "warn" }
trivial_numeric_casts         = { level = "warn" }
unsafe_attr_outside_unsafe    = { level = "warn" }
unsafe_op_in_unsafe_fn        = { level = "warn" }
unstable_features             = { level = "warn" }
unused_extern_crates          = { level = "warn" }
unused_import_braces          = { level = "warn" }
unused_lifetimes              = { level = "warn" }
unused_macro_rules            = { level = "warn" }
unused_qualifications         = { level = "warn" }

absolute_paths_not_starting_with_crate = { level = "allow" }
ambiguous_negative_literals            = { level = "allow" }
closure_returning_async_block          = { level = "allow" }
deref_into_dyn_supertrait              = { level = "allow" }
elided_lifetimes_in_paths              = { level = "allow" }
ffi_unwind_calls                       = { level = "allow" }
impl_trait_overcaptures                = { level = "allow" }
let_underscore_drop                    = { level = "allow" }
linker_messages                        = { level = "allow" }
macro_use_extern_crate                 = { level = "allow" }
missing_copy_implementations           = { level = "allow" }
missing_debug_implementations          = { level = "allow" }
missing_docs                           = { level = "allow" }
tail_expr_drop_order                   = { level = "allow" }
trivial_casts                          = { level = "allow" }
unit_bindings                          = { level = "allow" }
unreachable_pub                        = { level = "allow" }
unsafe_code                            = { level = "allow" }
variant_size_differences               = { level = "allow" }